{"version":3,"file":"kotlinx-atomicfu.js","sources":["../../../../../atomicfu/src/commonMain/kotlin/kotlinx/atomicfu/AtomicFU.common.kt","runtime/arrayUtils.kt","../../../../../atomicfu/src/commonMain/kotlin/kotlinx/atomicfu/TraceFormat.kt","../../../../../atomicfu/src/jsMain/kotlin/kotlinx/atomicfu/locks/Synchronized.kt","../../../../../atomicfu/src/commonMain/kotlin/kotlinx/atomicfu/MangledJsNames.kt","../../../../../atomicfu/src/jsMain/kotlin/kotlinx/atomicfu/Trace.kt"],"sourcesContent":[null,"/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\n@PublishedApi\nexternal internal fun <T> Array(size: Int): Array<T>\n\n@JsName(\"newArray\")\nfun <T> newArray(size: Int, initValue: T) = fillArrayVal(Array<T>(size), initValue)\n\n@JsName(\"newArrayF\")\ninline fun <T> arrayWithFun(size: Int, init: (Int) -> T) = fillArrayFun(Array<T>(size), init)\n\n@JsName(\"fillArray\")\ninline fun <T> fillArrayFun(array: Array<T>, init: (Int) -> T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = init(i)\n    }\n    return array\n}\n\n@JsName(\"booleanArray\")\nfun booleanArray(size: Int, init: dynamic): Array<Boolean> {\n    val result: dynamic = Array<Boolean>(size)\n    result.`$type$` = \"BooleanArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, false)\n        false -> result\n        else -> fillArrayFun<Boolean>(result, init)\n    }\n}\n\n@JsName(\"booleanArrayF\")\ninline fun booleanArrayWithFun(size: Int, init: (Int) -> Boolean): Array<Boolean> = fillArrayFun(booleanArray(size, false), init)\n\n@JsName(\"charArray\")\n@Suppress(\"UNUSED_PARAMETER\")\nfun charArray(size: Int, init: dynamic): Array<Char> {\n    val result = js(\"new Uint16Array(size)\")\n    result.`$type$` = \"CharArray\"\n    return when (init) {\n        null, true, false -> result // For consistency\n        else -> fillArrayFun<Char>(result, init)\n    }\n}\n\n@JsName(\"charArrayF\")\ninline fun charArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = charArray(size, null)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"untypedCharArrayF\")\ninline fun untypedCharArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = Array<Char>(size)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"longArray\")\nfun longArray(size: Int, init: dynamic): Array<Long> {\n    val result: dynamic = Array<Long>(size)\n    result.`$type$` = \"LongArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, 0L)\n        false -> result\n        else -> fillArrayFun<Long>(result, init)\n    }\n}\n\n@JsName(\"longArrayF\")\ninline fun longArrayWithFun(size: Int, init: (Int) -> Long): Array<Long> = fillArrayFun(longArray(size, false), init)\n\nprivate fun <T> fillArrayVal(array: Array<T>, initValue: T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = initValue\n    }\n    return array\n}",null,null,null,null],"names":[],"mappings":";;;;;;;;;;;;;;WAihB6C,gB;gBCpgB7C,K;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECFA,uB;G;sDAKI,wB;IAIyD,OAAE,KAAF,qBAAU,KAAV,W;G;;;;ECR7D,yB;G;oHAEI,Y;G;0HACA,Y;IAA8B,W;G;wHAC9B,Y;G;;;;;;;uBCRoC,a;4CACqB,c;uBACrB,a;4CACqB,c;wBACpB,c;6CACqB,e;2BAClB,iB;gDACqB,kB;iBAG/B,wB;oBAGG,wB;gBACJ,oB;sBACM,0B;2BACK,+B;sBACL,0B;2BACK,+B;sBACL,0B;2BACK,+B;sBACL,0B;2BACK,+B;gBACX,oB;qBACK,yB;gBACL,oB;qBACK,yB;0BAGK,iC;qBACL,6B;sBACC,+B;yBACG,qC;qBACJ,6B;eAGN,e;sBACO,c;mBAGH,wB;2BAGQ,gB;2BACA,oB;gBACX,sB;uBACO,sB;iCACU,6B;mBAId,yB;mBACA,yB;mBACA,yB;mBACA,yB;uBCjDgB,iB;SFNlC,mB;;;"}